<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" type="text/css" href="ph-help.css">
<title>DateTime data</title>
</head>
<body>
<div class=ph1>
FAQ: DateTime data </div>

<div class=ph2>Knowledge Notes </div>

<div class=ph3>
  <p><BR>
    While PowerHome does not incorporate &quot;native&quot; charting capability, it is possible to chart just about any data that PH can access, using the following Google Charts extraordinarily capable API. <BR>
    <BR>
    Introductory documentation is available here... <BR>
    <A href="https://google-developers.appspot.com/chart/interactive/docs/index" target="_blank"> https://google-developers.appspot.com/chart/interactive/docs /index</A> <BR>
    <BR>
    and a wonderful Help Forum with quick responses and terrific mentors here... <BR>
    <A href="https://groups.google.com/forum/#!forum/google-visualization-api" target="_blank"> https://groups.google.com/forum/#!forum/google-visualization -api</A> <BR>
    <BR>
    Using the Google API, coupled with a very moderate amount of javaScrip it is possible to display graphs of any numeric values that PH can access. <BR>
    <BR>
    As an aside, what is documented below is for Line Charting, but the Google Chart API is astoundingly capable, allowing for the creation of line, pie, donut, column, area, scatter, and more charts.  You can even create these Gauges ... <BR>
    <img src="images/chart.gauges.jpg" alt="gauges">  </p>
  <p><BR>
  <BR>
    <BR>
  The example documentation here is broadly general, and shows a web page displaying 3 different charts, but this dialog will only cover a single chart, the DAY chart. The others are similar, but have different axis parameters and Timed Event firing schedules.. </p>
  <p>The Line chart shown below (the DAY chart) is one chart of the trio.<BR>
    <img src="images/chart.jpg" alt="chart"></p>
  <p>This chart is created from the following web page...</p>
  <blockquote>
    <p>
      <strong>chartTemps.html:</strong> <EM>The web page that presents the charts using the Google Charts API. This page is almost entirely javaScript, but it is heavily commented to help it be as understandable as possible. This web page is constructed to create the three charts using a single function, drawChart(), and passing parameters to it in the call, that define the axis ranges, various labels, input csv file, etc.</EM></p>
 
 <img src="images/chart-html.jpg" alt="Chart html Page">
  
  <p>The chart was produced from data contained in a CSV file that looks like this... </p>
  <blockquote>
    <p>Time,Dwn,Dwn,Mid,Mid,Out,Out,Frzr,Frzr,Frig,Frig<br>
      0,71.1,,71,,28.7,,4.6,,26.5,<br>
      0.17,70.6,,71,,28.7,,4.6,,26.5,<br>
      0.33,70.3,,71,,27.9,,2.6,,25.6,<br>
      0.5,70.2,,71,,27.9,,1.1,,25.6,<br>
      0.67,70.1,,71,,28.2,,-0.4,,25.6,<br>
      0.83,70.1,,71,,29,,-0.9,,29.2,<br>
      1,70.1,,71,,29,,-1.9,,32.1,<br>
      1.17,69.6,,71,,28.7,,-2.4,,34.8,<br>
      1.33,69.3,,71,,28.7,,-2.4,,35.7,<br>
      1.5,69.2,,71,,28.7,,-2.9,,36.6,<br>
      . . . . .<br>
      . . . . .<br>
      22.5,72.1,,,71,,29.6,,0.6,,46.3<br>
      22.67,72.1,,,71,,29.6,,1.1,,46.5<br>
      22.83,72.6,,,71,,29.9,,1.6,,40.4<br>
      23,72.3,,,71,,29.1,,2.1,,33.7<br>
      23.17,72.2,,,71,,29.1,,2.6,,31.1<br>
      23.33,71.6,,,71,,28.8,,3.1,,30.1<br>
      23.5,71.3,,,71,,28.2,,3.6,,28.7<br>
      23.67,71.1,,,71,,28.7,,3.6,,28.3<br>
      23.83,71.1,,,71,,28.7,,4.1,,27.4<br>
      
      
    </p>

  <p>This CSV Day file contains specific DAY CHART data and timing information. There will be similar csv files for the WEEK and MONTH charts. </p>
  <p>The PH &quot;SQL UPDATE_DAY_TBL&quot; macro produces the data for this CSV file. Whenever the chart viewing web page &quot;chartTemps.html&quot; is opened, it  calls the Google charting API functions to chart the data from this CSV file.</p>
  <p>The  &quot;SQL UPDATE_DAY_TBL&quot; PH Macro is called from a Timed Event that runs every 10 minutes, thus populating 6 time bins per hour, over a 24 hour day. This macro looks like this...</p>
  <p><img src="images/chart.sqlday.jpg" alt="Create chartDAY macro" width="1302" height="1255"><BR><br>

  All of the collected data is stored in the PowrHome &quot;userData2&quot; database Table, and all of the database management is done using PowerHome standard SQL functions See this PH Forum link for information on that table (search for "userdata2" to find the info in this large Thread). It is on page 1.. <BR>
  <BR>
     
  <A href="http://www.power-home.com/forum/forum_posts.asp?TID=2723&KW=userdata2" target="_blank"> http://www.power-home.com/forum/forum_posts.asp?TID=2723&amp;KW= userdata2</A> <BR>
  <BR>
  This example chart uses the following columns in the PH userData2 db Table ... <BR>
  <BR>
  <STRONG>NOTE:</STRONG> The Charts show a sensor's data line as solid (for current) and dashed (for historic) data.  That way you can see what was happening, at the current time in the period before, to identify any deviations from expected norms. This is handled in the Google Chart API by using SQL to move the paired (new/old) data from the left pair-column to the right column at the beginning of a new charting period (ie, midnight for the DAY chart).  The Google Chart visualization (on the chartTemps.html page) charts left column data as "solid" and right column data as "dashed". The following image only shows &quot;left&quot; column (new) data points. <BR>
  <BR>
  <img src="images/chart.userdata2.jpg" alt="userData2 Tbl" width="810" height="742">  <BR>
  <BR>
  The contents of these columns is as follows... <BR>
  </p>
  <ul>
    <LI>uid - Sequentially numbered as a unique index key</LI>
    <LI>Type - I'm using "1" to mark this as a "Day" table, since I will have "Week" and "Month" and maybe even "Year" tables ( Type=2,3,4) as I replace the LogTemp charts.</LI>
    <LI>idstring: Not used</LI>
    <LI>idnum: Not used</LI>
    <LI>iddate - not used</LI>
    <LI>valstring1: Time expressed as a number.  Required to make Google Charts use a continuous,, rather than discreet X-Axis so that data is displayed in the correct time position even if there are missing data points. The UPDATE Macro converts true time into discrete numeric bins so that everything is standardized.  See above comment about my 10 minute (1/6th hour) time increments.</LI>
    <LI>valstring2: Holds the current (new) data, since 00:00 hours up to the current viewing time.</LI>
    <LI>valstring3: This column holds the historic data.  This Day view is a 24 hour cyclic buffer.  So if the current snapshot was at 2PM all of the day from 00:00 - 14:00 hours would be in the Valstring1 column (and displayed as a solid line) while the data from 2PM to midnight would all appear in the Valstring2 column, since that is historic (yesterday's data).}</LI>
    <LI>No other columns are used for Charting data but valnum1 and valnum2 are used as a ring buffer to compute long term average temps for the Frig and Frzr.  This need will disappear with the release of PH 2.1.5c which will have averaging built into the Analog I/O Devices support.</LI>
  </ul>
 
  <p>In addition to these these files, an additional Macro is also useful. It is the &quot;SQL CREATE_DAY_TABLE&quot; which makes sure the userData2 db is cleared out before use, and then creates a set of standard data capture time bins, for use by the &quot;SQL CREATE_DAY_TABLE&quot; routine. NOTE: The <EM>very first formula in this macro (normally disabled) can be enabled to assure an empty database Table. Normally it is disabled to allow just the DAY entries to be rerset, in the event the db is used for multiple charts. This table covers 24 hours and has 6-bins (10 min slots) within each hour. The DAY data is all keyed as Type-1</EM></p>
  <UL><BR>
    <img src="images/chart.createTbl.jpg" alt="createDAY Tbl" width="1306" height="997"><BR>
    
 
  <BR>
  ============================ <BR>
  OK. All the background stuff is defined, how do you use this? <BR>
  <BR>
  Just create a web link from your Web Center page to <STRONG><EM>chartTemps.html</EM></STRONG> ! <br>
<br>


</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
<head>
<link rel="stylesheet" type="text/css" href="ph-help.css">
<title>ph_regexdiff</title>
</head>
<body>

<div class=ph1>
ph_regexdiff PowerHome formula function
</div>

<div class=ph2>Description</div>
<div class=ph3>
searches a string of data and returns the data between two regular expression searches.
</div>

<div class=ph4>Syntax</div>
<div class=ph5>
ph_regexdiff ( pat1, pat2, data, start, flags )
</div>
<div>
<table width=100%>
<tr><td><span class=ph6>Argument</span></td> <td><span class=ph7>Description</span></td></tr>

<tr><td class=ph8>pat1</td> <td class=ph9><span class="ph-datype">String</span>.  The starting regular expression search pattern.</td></tr>

<tr><td class=ph8>pat2</td> <td class=ph9><span class="ph-datype">String</span>.  The ending regular expression search pattern.</td></tr>

<tr><td class=ph8>data</td> <td class=ph9><span class="ph-datype">String</span>.  The string in which to perform the search.</td></tr>

<tr><td class=ph8>start</td> 
<td class=ph9><span class="ph-datype">Long</span>.  The position within the data in which to start the search.  Use 1 to start at the beginning.</td>
</tr>

<tr><td class=ph8>flags</td> <td class=ph9>
<span class="ph-datype">Integer</span>.  Flags that control how the search is performed.  Add individual flag values together.  Add 1 to cause the search to match case.  Add 2 to cause the search to ignore cr/lf's within the data.</td>
</tr>
</table>
</div>

<div class=ph10>Return value</div>
<div class=ph11>
String.  Returns the data string between the pat1 regular expression and pat2 regular expression.
</div>

<div class=ph12>Usage</div>
<div class=ph13>
Use this function for powerful text search capabilities.  The regular expression special characters supported are: </div>
<br><br>
<table>
<tr>
<td class=ph8>.</td>
<td class=ph9>Matches any character.</td>
</tr>

<tr>
<td class=ph8>\<</td>
<td class=ph9>This matches the start of a word, where a word is defined in the traditional sense, that is, letters, or number. Spaces, punctuation, CR/LF, etc. would not be included as part of a word, and thus create a break.</td>
</tr>

<tr>
<td class=ph8>\></td>
<td class=ph9>This matches the end of a word. See also  word definition above.</td>
</tr>

<tr>
<td class=ph8>\x</td>
<td class=ph9>This allows you to use a character x that would otherwise have a special meaning. For example, \[ would be interpreted as [ and not as the start of a character set.</td>
</tr>

<tr>
<td class=ph8>[...]</td>
<td class=ph9>This indicates a set of characters, for example, [abc] means any of the characters a, b or c. You can also use ranges, for example [a-z] for any lower case character.</td>
</tr>

<tr>
<td class=ph8>[^...]</td>
<td class=ph9>The complement of the characters in the set. For example, [^A-Za-z] means any character except an alphabetic character.</td>
</tr>

<tr>
<td class=ph8>^</td>
<td class=ph9>This matches the start of a line (unless used inside a set, see above).</td>
</tr>

<tr>
<td class=ph8>$</td>
<td class=ph9>This matches the end of a line.</td>
</tr>

<tr>
<td class=ph8>*</td>
<td class=ph9>This matches 0 or more times. For example, Sa*m matches Sm, Sam, Saam, Saaam and so on.</td>
</tr>
<tr>
<td class=ph8>+</td>
<td class=ph9>This matches 1 or more times. For example, Sa+m matches Sam, Saam, Saaam and so on.</td>
</tr>
</table>

<br>
  An important note on the special characters is that they can conduct a "greedy" regular expression search.  When using the * and + special characters this function will not stop at the first match but will instead go to the last match. </p>
<p>NOTE: If a string contains any quote characters (&quot;) then the string must be delimited with the single quote charcter ('). For example... <span class="ph-txt-red"><strong>'</strong></span><strong>he said, &quot;no&quot;<span class="ph-txt-red">'</span></strong><br>
<br>
This function will also not perform a regular expression search that spans multiple lines.  If the data to search contains carraige returns or line feeds, the entire matching search data for the regular expression must exist within a single line.  If your regular expression must span across a line, then add 2 to the flags to have CR's and LF's temporarily converted.  CR will be converted to ASCII 128 and LF will be converted to ASCII 129.  If you convert CF/LF then you can include them in your search with PowerHome escape characters ~128 and ~129 respectively.
<br><br>
Within each search pattern you may perform multiple searches by separating your search pattern using the PowerHome escape character ~255.  This is most useful when CF/LF IS NOT replaced and trying to match a particular piece of data that spans multiple lines.  If you do multiple searches, the last search is used as the starting position and ending position of the returned text.

<div class=ph10>
Examples
</div>
<div class=ph11>
The following examples demonstrate typical syntax/usage for this function. <br>
</div>
<div class=ph20>
See also the .FAQs-String Tips-Hints Help file.
<br>
<br>
The following examples assume that the following string (with CR/LF line enders) is stored in [LOCAL1]... <br> 
 <table width="356">
  <tr>
  <td width=30>&nbsp;</td>
  <td>
<strong>    ROMId,Name, Value,Avg,</span><br>
    "3F000001CD92C728","Refrig",39.20,37.46, <br>
    "3F6000017C8BD128","Outside",23.90,19.81, <br>
    "3F000001CDB2BA27","House",70.65,70.13, <br>
    "3F000001CD9E6D28","Freezer",1.96,1.11,</strong>  </td></tr>
  </table>
    <br>
    The following command uses a CR/LF Flag of &quot;0&quot; to search only lines ...<br>
  <span class="ph3"><strong>ph_regexdiff (&quot;ROMId,&quot;, &quot;, Val&quot;, &quot;[LOCAL1]&quot;, 1, 0 )</strong></span> --&gt; Finds <span class="ph-txt-red">Name</span><br>
     <br>
     While this expression with the CR/LF Flag set to search thru everything (2) ...<br> 
       <span class="ph3"><strong>ph_regexdiff (&quot;ROMId,&quot;, &quot;, Val&quot;, &quot;[LOCAL1]&quot;, 1, 2 )</strong></span> --&gt; Finds all characters from &quot;<span class="ph-txt-red">Name</span>&quot; to the <span class="ph-txt-red">ending comma</span> after 1.11 (ie, Name ... 1.11,)<br> 
  <br>

  This ...<br> 
    <strong class="ph3">ph_regexdiff ('3F.+&quot;,', ',', '[LOCAL1]', 1,0 ) --&gt; Finds <span class="ph-txt-red">39.20</span> </strong> <br>
<br>
While ...<br>

<span class="ph3"><strong>ph_regexdiff ('3F.+",', ',', '[LOCAL1]', 1,2 )</strong> --> finds  </span><span class="ph-txt-red">1.96</span> <br>
<br>

==== 
<br><br>

More Examples: {Searching in LOCAL1}
<table>
<tr>
<td width=25>&nbsp;</td>
<td><strong>ph_regexdiff ('2C728', '\&lt;', '[LOCAL1]', 1,0 )</strong> --&gt; finds  <strong class="ph-txt-red">&quot;,&quot;</strong>   (Between ..C728 and Refrig..) <br>
  <strong>ph_regexdiff ('2C728', '\&gt;', '[LOCAL1]', 1,0 )</strong> --&gt; finds  <strong class="ph-txt-red">&quot;,&quot;Refrig</strong>  <br>
  <strong>ph_regexdiff ('BA27...', &quot;7&quot;, '[LOCAL1]', 1,0 )</strong> --&gt;  finds <span class="ph-txt-red">House&quot;,</span>  <br>
  <strong>ph_regexdiff ('Refrig', &quot;$&quot;, '[LOCAL1]', 1,0 )</strong>  --&gt; finds <strong class="ph-txt-red">&quot;,39.20,37.46,</strong><br>
  <strong>ph_regexdiff (&quot;3F[0-9]+&quot;,&quot;R&quot;, &quot;[LOCAL1]&quot;, 1,0 )</strong> --&gt; finds <strong class="ph-txt-red">CD92C728&quot;,&quot;</strong><br>
</tr>
</table>
</div>


</div>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
<head>
<link rel="stylesheet" type="text/css" href="ph-help.css">
<title>ph_regexsnap</title>
</head>
<body>

<div class=ph1>
ph_regexsnap PowerHome formula function
</div>

<div class=ph2>Description</div>
<div class=ph3>
Performs a regular expression search and snaps specific pieces of data out.
</div>

<div class=ph4>Syntax</div>
<div class=ph5>ph_regexsnap ( pattern, data, start, flags )
</div>
<div>
<table width=100%>
<tr><td><span class=ph6>Argument</span></td> <td><span class=ph7>Description</span></td></tr>

<tr><td class=ph8>pattern</td> <td class=ph9>String.  A regular expression search pattern containing tagged regions of (up to 9) that you want snapped out and returned.</td>
</tr>

<tr>
<td class=ph8>data</td> <td class=ph9>String.  The string in which to perform the search and snap.</td>
</tr>

<tr>
<td class=ph8>start</td> <td class=ph9>Long.  The starting postion of the search.  Use 1 to start at the beginning.</td>
</tr>

<tr>
<td class=ph8>flags</td> <td class=ph9>Integer.  Flags that control how the search is performed.  Add individual flag values together.  Add 1 to cause the search to match case.  Add 2 to cause the search to ignore cr/lf's within the data.</td>
</tr>
</table>
</div>

<div class=ph10>Return value</div>
<div class=ph11>String.  Returns the snapped data from the searched string.</div>
<div class=ph12>Usage</div>
<div class=ph13>Use this function for powerful text search capabilities.  The regular expression special characters supported are:<br><br>
<table>
<tr><td class=ph8>.</td> <td class=ph9>Matches any character.</td></tr>

<tr><td class=ph8>\(</td> <td class=ph9>This marks the start of a region for tagging a match.</td></tr>

<tr><td class=ph8>\)</td> <td class=ph9>This marks the end of a tagged region.</td></tr>

<tr><td class=ph8>\<</td> <td class=ph9>This matches the start of a word.</td></tr>

<tr><td class=ph8>\></td> <td class=ph9>This matches the end of a word.</td></tr>

<tr><td class=ph8>\x</td> <td class=ph9>This allows you to use a character x that would otherwise have a special meaning. For example, \[ would be interpreted as [ and not as the start of a character set.</td></tr>

<tr><td class=ph8>[...]</td> <td class=ph9>This indicates a set of characters, for example, [abc] means any of the characters a, b or c. You can also use ranges, for example [a-z] for any lower case character.</td></tr>

<tr><td class=ph8>[^...]</td> <td class=ph9>The complement of the characters in the set. For example, [^A-Za-z] means any character except an alphabetic character.</td></tr>

<tr><td class=ph8>^</td> <td class=ph9>This matches the start of a line (unless used inside a set, see above).</td></tr>

<tr><td class=ph8>$</td> <td class=ph9>This matches the end of a line.</td></tr>

<tr><td class=ph8>*</td> <td class=ph9>This matches 0 or more times. For example, Sa*m matches Sm, Sam, Saam, Saaam and so on.</td></tr>

<tr><td class=ph8>+</td> <td class=ph9>This matches 1 or more times. For example, Sa+m matches Sam, Saam, Saaam and so on.</td></tr>
</table>

<br>
An important note on this function is that it is a "greedy" regular expression search.  When using the * and + special characters this function will not stop at the first match but will instead go to the last match.
<br><br>
This function will also not perform a regular expression search that spans multiple lines.  If the data to search contains carraige returns or line feeds, the <strong>entire matching search data for the regular expression must exist within a single line</strong>.  If your regular expression must span across a line, then add 2 to the flags to have CR's and LF's temporarily converted.  CR will be converted to ASCII 128 and LF will be converted to ASCII 129.  If you convert CF/LF then you can include them in your search with PowerHome escape characters ~128 and ~129 respectively.
NOTE however that replacing CR/LFs will slow down searches significantly as, before the search can even be started, the entire string must be examaned character-by-character and the replacments made as needed. It is thus preferable to use the escape (~255) character, rather than (.+) and CR/LF replacement, where possible. <br>
<br>
The ~255 approach allows you to perform multiple searchs within your search pattern (even across multiple lines).  Only the last search, of multiple, can be used for Returning "snapped" data.
NOTE: the ~255 character is NOT a part of the regular expression syntax and is  strictly a PH special creation to separate regex searches.&nbsp; The \( and \) regex   characters are a pair that MUST go together, so  a   non-regex character expression should never be inserted between them.<br>
<br>
The <strong>regexsnap</strong> function is similar to the ph_regexdiff function in that it uses regular expressions to search and return data within the searched string.  Instead of returning data between two regular expressions (like ph_regexdiff), this function uses the \( and \) to mark tagged regions.  You may have up to 9 tagged regions in the last search pattern.  All matched text within the tagged regions will be "snapped out" and returned by this function.</div>

<div class=ph10>
Examples
</div>
<div class=ph11>
The following examples demonstrate typical syntax/usage for this function. <br>
</div>
<div class=ph20>
  <p>See also the .FAQs-String Tips-Hints Help file.
    <br>
    <br>
The following examples assume that the following string (CR/LF line enders) is stored in [LOCAL1]...
 <table width="356">
  <tr>
  <td width=30>&nbsp;</td>
  <td>
<strong>    ROMId,Name, Value,Avg,</span><br>
    "3F000001CD92C728","Refrig",39.20,37.46, <br>
    "3F60000017C8BD128","Outside",23.90,19.81, <br>
    "3F000001CDB2BA28","House",70.65,70.13, <br>
    "3F000001CD9E6D28","Freezer",1.96,1.11, 
</strong>  </td></tr>
  </table>
  <p>The following command <strong><br>
      <span class="ph3">ph_regexsnap('ROM~255,\(.+,\)', '[LOCAL1]', 1, 0 )</span></strong><span class="ph3"> --&gt; finds <strong>Name, Value,Avg,</strong> </span><br>
  because the &quot;.+,&quot; search is greedy and doesn't quit until it finds the last &quot;<strong>,</strong>&quot;</p>
  <p> While <strong><br>
      <span class="ph3">ph_regexsnap('ROM~255,\(.+,\)', '[LOCAL1]', 1, 2 )</span></strong><span class="ph3"> --> finds everything from <strong>Name</strong> to .... <strong>6D28&quot;,&quot;Freezer&quot;,1.96,1.11,</strong> <br>
      </span>  because the ignore CR/LF Flag is set so the extraction keeps going across multiple lines until it finds the last comma. </p>
  <p>To find Name only would require <strong>ph_regexsnap('ROM~255,\(....\)', '[LOCAL1]', 1, 0 ) </strong>where the &quot;....&quot; accepts any 4 characters after the comma. Because of greediness, regsnap is thus not easily used in some situations and the regexdiff family is more useful. However, when you are assured of finding unique strings to bound the search, then regexsnap can be very powerful, while easy to use.</p>
  <p>A good example to explain the use of ~255 is extracting weather data.</p>
  <p>Consider the following data which may have been returned by a ph_geturl function (the data is simplified of course):</p>
  
  <table width=218>
  <tr>
  <td width=30>&nbsp;</td>
  <td>
  &lt;html&gt;<br>
    &lt;body&gt;<br>
    &lt;h4&gt;Temperature&lt;/h4&gt;<br>
    &lt;b&gt;78.5&lt;/b&gt;<br>
    &lt;h4&gt;Humidity<span class="ph-txt-grn">&lt;/h4&gt;<br>
&lt;b&gt;</span><span class="ph-txt-red">55.7</span>&lt;/b&gt;<br>
    &lt;h4&gt;Wind Speed&lt;/h4&gt;<br>
    &lt;b&gt;7.5&lt;/b&gt;<br>
    &lt;/body&gt;<br>
    &lt;/html&gt;</p>	</td>
	</tr>
  </table>
  <p>Without the ~255, this data would be difficult to parse (like retrieving the value for humidity) unless you substituted the CR/LF (which we never want to do if we can help it).  Since a regex can only be performed on a single line, the best we could do is search for the second occurrence of the &lt;b&gt;&lt;/b&gt; tags which will work for this data but if they added a new parameter, then this would fail.  </p>
  <p>Using the ~255 we can do a regexsnap to retrieve humidity like this...</p>
  <p><span class="ph3"><strong>ph_regexsnap(&quot;Humidity~255&lt;b&gt;\(.+\)&lt;/b&gt;&quot;,'[LOCAL1]',1,0)</strong></span>&nbsp;&nbsp;&nbsp;{where the ~255 causes the characters in <span class="ph-txt-grn">green</span> above to be skipped over, and the <span class="ph-txt-red">red</span> characters to be extracted.} </p>
  <p>The statement above will always return the value between the first &lt;b&gt;&lt;/b&gt; tags following the word Humidity.  Of course, we have to remember the regex is greedy so we need to be careful with the &quot;.+&quot;.  If there are multiple &lt;b&gt;&lt;/b&gt; tags on the same line, we would get more than we expected.  Since we know the humidity value will only be numbers and a decimal, we could error proof the above a little more with this:</p>
 <p><span class="ph3"><strong>ph_regexsnap(&quot;Humidity~255&lt;b&gt;\([0-9\.]*\)&lt;/b&gt;&quot;,'[LOCAL1]',1,0)</strong></span><br>
    <br>
    The following command extracts &quot;<strong>92C</strong>&quot; <br>
    <br>

    <span class="ph3"><strong>ph_regexdiff1 (&quot;3F~255D&quot;, &quot;7&quot;, &quot;[LOCAL1&quot;', 1, 1,0,3,0 )</strong></span> <br>
  </p>
</div>

</body>
</html>

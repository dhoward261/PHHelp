<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
<head>
<link rel="stylesheet" type="text/css" href="ph-help.css">
<title>ph_regexdiff1</title>
</head>

<body>
<div class=ph1>
ph_regexdiff1 PowerHome formula function
</div>

<div class=ph2>Description</div>
<div class=ph3>
Searches a string of data and returns the data between two regular expression searches.
</div>
<div class=ph4>Syntax</div>
<div class=ph5>

ph_regexdiff1 ( pat1, pat2, data, start, occ, flags, localstart, locallength )

</div>
<div>
<table width=100%>
<tr>
<td><span class=ph6>Argument</span></td>
<td><span class=ph7>Description</span></td>
</tr>
<tr>
<td class=ph8>

pat1

</td>
<td class=ph9>

<span class="ph-datype">String</span>.  The starting regular expression search pattern.</td>
</tr>
<tr>
<td class=ph8>

pat2

</td>
<td class=ph9>

<span class="ph-datype">String</span>.  The ending regular expression search pattern.</td>
</tr>
<tr>
<td class=ph8>

data

</td>
<td class=ph9>

<span class="ph-datype">String</span>.  The string in which to perform the search.</td>
</tr>
<tr>
<td class=ph8>

start

</td>
<td class=ph9>

<span class="ph-datype">Long</span>.  The position within the data in which to start the search.  Use 1 to start at the beginning.</td>
</tr>
<tr>
<td class=ph8>

occ

</td>
<td class=ph9>

<span class="ph-datype">Integer</span>.  The matching occurrence number to be returned.  Use 1 to return the first matching occurrence.  A 3 will return the third matching occurrence, etc.</td>
</tr>
<tr>
<td class=ph8>

flags

</td>
<td class=ph9>

<span class="ph-datype">Integer</span>.  Flags that control how the search is performed.  Add individual flag values together.  Add 1 to cause the search to match case.  Add 2 to cause the search to ignore cr/lf's within the data.</td>
</tr>
<tr>
<td class=ph8>

localstart

</td>
<td class=ph9>

<span class="ph-datype">Integer</span>.  The index of a local variable in which to have the start (<strong>1st character</strong>) of  the found data returned. Use 0 to not have the start returned.</td>
</tr>
<tr>
<td class=ph8>

locallength

</td>
<td class=ph9>

<em>Integer</em>.  The index of a local variable in which to have the length of thefound data returned. Use 0 to not have the length returned.</td>
</tr>
</table>
</div>
<div class=ph10>Return value</div>
<div class=ph11>

String.  Returns the data string between the pat1 regular expression and pat2 regular expression.

</div>
<div class=ph12>Usage</div>
<div class=ph13>
Use this function for powerful text search capabilities.  The regular expression special characters supported are:
<br><br>
<table>
<tr>
<td class=ph8>.</td>
<td class=ph9>Matches any character.</td>
</tr>
<tr>
<td class=ph8>\<</td>
<td class=ph9>This matches the start of a word.</td>
</tr>
<tr>
<td class=ph8>\></td>
<td class=ph9>This matches the end of a word.</td>
</tr>
<tr>
<td class=ph8>\x</td>
<td class=ph9>This allows you to use a character x that would otherwise have a special meaning. For example, \[ would be interpreted as [ and not as the start of a character set.</td>
</tr>
<tr>
<td class=ph8>[...]</td>
<td class=ph9>This indicates a set of characters, for example, [abc] means any of the characters a, b or c. You can also use ranges, for example [a-z] for any lower case character.</td>
</tr>
<tr>
<td class=ph8>[^...]</td>
<td class=ph9>The complement of the characters in the set. For example, [^A-Za-z] means any character except an alphabetic character.</td>
</tr>
<tr>
<td class=ph8>^</td>
<td class=ph9>This matches the start of a line (unless used inside a set, see above).</td>
</tr>
<tr>
<td class=ph8>$</td>
<td class=ph9>This matches the end of a line.</td>
</tr>
<tr>
<td class=ph8>*</td>
<td class=ph9>This matches 0 or more times. For example, Sa*m matches Sm, Sam, Saam, Saaam and so on.</td>
</tr>
<tr>
<td class=ph8>+</td>
<td class=ph9>This matches 1 or more times. For example, Sa+m matches Sam, Saam, Saaam and so on.</td>
</tr>
</table>
<br>
  An important note on this function is that it is a "greedy" regular expression search.  When using the * and + special characters this function will not stop at the first match but will instead go to the last match. <br>
  <br>
  This function will also not perform a regular expression search that spans multiple lines.  If the data to search contains carraige returns or line feeds, the entire matching search data for the regular expression must exist within a single line.  If your regular expression must span across a line, then add 2 to the flags to have CR's and LF's temporarily converted.  CR will be converted to ASCII 128 and LF will be converted to ASCII 129.  If you convert CF/LF then you can include them in your search with PowerHome escape characters ~128 and ~129 respectively.
  <br>
  <br>
  Within each search pattern you may perform multiple searches by separating your search pattern using the PowerHome escape character ~255.  This is most useful when CF/LF IS NOT replaced and trying to match a particular piece of data.  If you do multiple searches, the last search is used as the starting position and ending position of the returned text.</p>
<p>NOTE: Where search pattern srings might contain a quote (') character then you must use the single quote (') character to delineate your string variables.<br>
</div>

<div class=ph10>
Examples
</div>
<div class=ph11>
The following examples demonstrate typical syntax/usage for this function. <br>
</div>
<div class=ph20>
See also the .FAQs-String Tips-Hints Help file.
<br>
<br>
The following examples assume that the following string (CR/LF line enders) is stored in [LOCAL1]... <br> 
    <span class="ph3">ROMId,Name, Value,Avg,</span><br>
    <span class="ph3">"3F000001CD92C728","Refrig",39.20,37.46, </span><br>
    <span class="ph3">"3F60000017C8BD128","Outside",23.90,19.81,</span> <br>
    <span class="ph3">"3F000001CDB2BA28","House",70.65,70.13,</span> <br>
    <span class="ph3">"3F000001CD9E6D28","Freezer",1.96,1.11, </span><br>
    <br>
    The following command extracts &quot;92C&quot; <br>
    <span class="ph3"><strong>ph_regexdiff1 (&quot;3F~255D&quot;, &quot;7&quot;, &quot;[LOCAL1&quot;', 1, 1,0,3,0 )</strong></span> <br>

  But ...<br> 
    <strong class="ph3">ph_regexdiff1 ('3F.+&quot;,', ',', '[LOCAL1]', 1, 1,2,3,0 )</strong> <br>
    fails because the ignore Return character Flag is turned on and the &quot;.+&quot; skips over all characters and will keep skipping thru lines until it finds the <strong>last</strong> &quot;D&quot; in the text. This occurs in the last (Freezer) line of the string, but there is then no &quot;7&quot; following after the &quot;D&quot; so the search fails. While in the   first example, the escape (~255) and looks for the next &quot;D&quot; it can find (which it matches in the first line so the Return code flag has no impact). </p>
  <p>Note that<br> 
        <strong class="ph3">ph_regexdiff1 ('3F.+&quot;,', ',', '[LOCAL1]', 1, 1,<span class="ph-txt-red">0</span>,3,0 )</strong> <br>
    does work as the search is now contained to the first line where a match is found, since the Return flag is now &quot;0&quot;. </p>
  <p>====<br>
    <br>
    Continuing with the same  source data, the following syntax could be used to get the Outside data value (23.90) ...<br>
    <span class="ph3"><strong>ph_regexdiff1('Outside&quot;,',&quot;,&quot;,&quot;[LOCAL1]&quot;,[LOCAL3],1,0,0,0) </strong></span><br>
    <br>
    Which  says to extract the string that is in-between <span class="ph-txt-red">Outside&quot;, </span> and  the next comma <span class="ph-txt-red">&quot;,&quot;</span> ... <br>
    <span class="ph3">Starting at the position in the LOCAL1 data indicated by the starting location in LOCAL3 (60) </span><br>
    <span class="ph3">Return the 1st matching occurance </span><br>
    <span class="ph3">No special flags required </span><br>
    <span class="ph3"> LOCAL3 will now contain the Index# of the 1st match character, equal to <strong>103</strong></span> <br>
    <span class="ph3"> Do not return Length</span> <br><br>
 
 This will return a value of of &quot;<strong>23.90</strong>&quot;  <br><br>

 ==== <br><br>

  A more general way to extract the data that also allows a simple macro loop to get successive values is ...<br>
  <span class="ph3"> ph_regexdiff1 ('3F~255&quot;,&quot;~255&quot;,', &quot;,&quot;, &quot;[LOCAL1]&quot;, 1, [TEMP1],2,3,0 ) {where TEMP1 is incremented] <br>
  </span>    <br>
    Which  says to look thru all lines (CRLF Flag=2) to find the string bounded on the left by <span class="ph-txt-red">3F...&quot;,&quot;...&quot;, </span> and  on the right by <span class="ph-txt-red">,</span> (where <span class="ph-txt-red">...</span> stands for the Escape character ) .. <br>
    <span class="ph3"> ( These bounding strings are highlighted in this sample line ... "<span class="ph-txt-red">3F</span><span class="ph-txt-grn">000001CD92C728</span><span class="ph-txt-red">","</span><span class="ph-txt-grn">Refrig</span><span class="ph-txt-red">",</span>39.20,37.46, )</span> {red=match; grn=escape over}<br>
    <span class="ph3">    Using the &quot;occ&quot; parameter (TEMP1 above) in a loop to set which match occurence we want, will can select each of the four values in turn.</span>   <br>
      
 <br><br> ==== <br><br>

More Examples: &nbsp;&nbsp;&nbsp;(LOCAL1 contains the text to be searched) <br>

<span class="ph3"> ph_regexdiff1 ("3F~255D", "7", "[LOCAL1]", 1, 1,2,3,0 ) --&gt; finds &quot;92C&quot;</span><br>
<table width=800 cellpadding="0" cellspacing="0"><!--DWLayoutTable-->
<tr>
<td width=30>&nbsp;</td>
<td width="800"><span class="ph30">NOTE: The regular expression engine will only search for a match on its regex search string within the confines of a single line.</span><br>
  <span class="ph30">If the data contains multiple lines, the search is performed on EACH line until a match is found. </span><br>     
  <br>
  <span class="ph30">If the sought string is all on one line then CRLFs make no practical difference, but if the sought string covers multiple lines then either the ~255 escape character must be used to span line endings or the replace CRLF flag must set set on in order to find a match.</span> <br>
</td>
</tr>
</table>

<span class="ph3">ph_regexdiff1 ("3F~255D", "7", "[LOCAL1]", 1, 1,0,3,0 ) --&gt; finds  <strong class="ph-txt-red">92C</strong> </span><br>
<span class="ph3">ph_regexdiff1 ("3F.+D", "7", "[LOCAL1]", 1, 1,0,3,0 ) --&gt; finds  <strong class="ph-txt-red">92C</strong></span> <br>
<span class="ph3">ph_regexdiff1 ("3F~255D", "7", "[LOCAL1]", 1, 1,0,3,0 ) --&gt; finds <strong class="ph-txt-red">92C</strong></span> <br>
<span class="ph3">ph_regexdiff1 ('3F.+",', ',', '[LOCAL1]', 1, 1,2,3,0 ) --&gt; finds <strong class="ph-txt-red">1.96</strong> by greed</span> <br>
<span class="ph3">ph_regexdiff1 ('Outside&quot;,',&quot;,&quot;, "[LOCAL1]", 1, 1,0,3,0 ) --&gt; finds <strong class="ph-txt-red">23.90</strong></span> --&gt; NOTE that the first parameter (Outside) contained a &quot; thus<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a single quote(') had to be used to delineate the parameter. <br>
<span class="ph3">ph_regexdiff1 ('3F.+&quot;,', ',', '[LOCAL1]', 1, 1,2,3,0 ) --&gt; finds <strong class="ph-txt-red">&quot;,23</strong></span> <br>
<span class="ph3">ph_regexdiff1 ('3F.+&quot;,', ',', '[LOCAL1]', 1, 1,0,3,0 ) --&gt; fails because &quot;the ignore CRLF is </span> not set&quot; and the .+ search will not work across multiple lines. <br>
<span class="ph3">ph_regexdiff1 ('3F~255&quot;,', ',', '[LOCAL1]', 1, 1,0,3,0 ) --&gt;finds <strong class="ph-txt-red">&quot;,23</strong> as the escape (~255) ignores CRLF line breaks. </span> <br>
<span class="ph3">ph_regexdiff1 (&quot;ROMId,&quot;, &quot;, Val&quot;, &quot;[LOCAL1]&quot;, 1, 1,0,3,0 ) --&gt; finds <strong class="ph-txt-red">Name</strong> </span> <br>
<span class="ph3"> ph_regexdiff1 ("ROMId,", "\>", "[LOCAL1]", 1, 1,0,3,0 ) --&gt; finds <strong class="ph-txt-red">Name</strong> </span> <br>

<br>
<br>

</div>

</body>
</html>

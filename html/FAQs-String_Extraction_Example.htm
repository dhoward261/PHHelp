<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" type="text/css" href="ph-help.css">
<title>String Extraction</title>
</head>
<body>
<div class=ph1>
FAQ: String Match/Locate/Extract Examples </div>

<div class=ph2>Knowledge Notes</div>

<div class=ph3><br>
The various string 
Match/Locate/Extract functions can be very complex and thus confusing.
<p>The following example pulls various data points from a weather site, demonstrates the use of a number of functions, and provides tips for "best use" of System/Global variables in the procecss.</p>
<p>An explaination of the macro follows the macro image ...</p>
<p><IMG alt="Get Weather" src ="images/MacroWeather.png" width=1252 height=810 ></p>
<p>This weather info was fetched from the "weatherforyou.com" web site and saved in LOCAL1.</p>
<p>Next a check is made to verify that a valid result was returned. If not an error message is posted in the User Log by the code at the "ERROR" label section of the macro. Note that the label of "nextLINE" is a bogus label. It could be anything (ie, "foofoo") you want as long as it is not a valid label. If PH can't find a label with the named designation, then it just goes to the next line of code. </p>
<p>Thus the (bogus) "nextLINE" label is discriptive for code-flow understanding.</p>
<p>Assuming we have a good page returned, it turns out that this web page is rather huge, so to keep subsequent string operations from bogging down, the text in LOCAL1  is trimmed to just 5000 characters around the area where the needed data is located. An easy way to determine this "sweet area" is to use the ph_saveurl() which will save your weather site page contents to a file. </p>
<p>Then open the file in Windows Word (or similar program) and use the word/character count feature to locate your "sweet spot." Using that data, use the "mid" function to extract an area around your interest area, allowing for reasonable variations in subsequent web page designs. </p>
<p>Next we look for the "Wind" data.</p>
<p>It is located in an html area that looks like this ...</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;span class="Label"&gt;Wind &lt;/span&gt;&lt;span class="Value"&gt;SW 18 MPH &lt;/span&gt; </p>
<p>Seq #80 then checks to see if the returned date was "Calm" rather than a wind speed in mph. Since the speed is used elsewhere and needs to be a number, it is converted from "Calm" to the number 0.</p>
<p class="ph3">NOTE: The formula in Seq #80 was (as well as other formulas before and  after) was ...<br>
  <strong>&nbsp;&nbsp;&nbsp;if(match (ph_getvar_s(1,2), "Calm"),"0","[LOCAL2]")</strong>, <br>
  and NOT ...<br> 
<strong>&nbsp;&nbsp;&nbsp;if(match ("[LOCAL2]", "Calm"),"0","[LOCAL2]")</strong></p>
<p class="ph3"><strong>
</strong>The<strong> ph_getvar_s() </strong>is the ONLY way that you can be assured of a good string being returned, since it is possible that a complex target string may contain BOTH single (') and double (") prime characters. It is a "best practice" to always use the <strong>ph_getvar_s()</strong> function when you want to get a perfect string returned. </p>
<p>Seq #90 snaps the numeric value of "18" out of the string returned into LOCAL2, which was "SW 18 MPH" </p>
<p>Finally (Seq #100) an error check is done to assure that a numeric value is returned. If the value extracted is not a number then a default value of "3" is placed in LOCAL2.</p>
<p>Next the Humidity data value (Seq 3120) is extracted from the web page environment of  ...</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;span class="Label"&gt;Humidity &lt;/span&gt;&lt;span class="Value"&gt;54%&lt;/span&gt; </p>
<p>In Seq #130, we error check and if the Humidity value id blank, then substitute "65" as a generic value.</p>
<p>In Seq #140 we extract the wind chill, or "Feels Like" temp from a web page environment of ...</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&lt;span class="SmallTemp"&gt;Feels Like &amp;deg; 10 F&lt;/span&gt;  </p>
<p>After that it is just some house keeping to round the numers to integer values.</p>
<p>This example gives a number if various ways to trim, find, and fetch data from complex data strings.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>  </p></div>
</body>
</html>

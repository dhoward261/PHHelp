<!DOCTYPE html PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="content-type">
    <link rel="stylesheet" type="text/css" href="ph-help.css">
    <title>Setting up Insteon Thermostats</title>
    <style type="text/css">
<!--
.style1 {
	color: #FF00FF;
	font-style: italic;
	font-weight: bold;
}
-->
    </style> </head>
  <body>
    <div class="ph1"> FAQ: New Thermostat Setup Procedure </div>
    <div class="ph2">Knowledge Notes </div>
    <div class="ph3">
      <p>With the release of PowerHome 2.1.5, an entirely new support system for
        Insteon Thermostats has been implemented.</p>
      <p>While this is a substantial benefit, it unfortunately means that <strong>old
          (pre 2.1.5) PowerHome configurations will no longer work</strong>.</p>
      <p>This tutorial documents the process for migrating, or creating new,
        thermostat configurations.</p>
      <p> If you are creating a NEW thermostat installation, then the first
        thing to do is to <strong>Find your STAT device in the Insteon Explorer
          "Types"</strong> Tab and <strong>Modify</strong> the Ctlr Groups
        entry for all Insteon stats you will be using. The default value is
        usually "1". Change this to "254" </p>
      <p><IMG alt="Stat Type Setup" src ="images/STAT-type.jpg" width=536 height=152 ></p>
      <p>Now Open the <strong>Devices</strong> Tab. If you are upgrading from
        an earlier version of PH then you may skip this step, as your devices
        are already entered in the database. Configure all of your STAT devices
        as exampled below. </p>
      <p><IMG alt="Stat Devices Setup" src ="images/STAT-Devices.jpg"

          width=1257 height=105 ></p>
      <p> Enter an <strong>ID</strong> and <strong>Description</strong>
        (Usually the same. The ID is used in Formulas to identify the device,
        and the Description is what appears in the Device Status window. (Most
        users find it most usefull to just make the two fields the same.)</p>
      <p> Enter the STAT Insteon <strong>Address</strong>, the <strong>Location,
          and</strong> the "<strong>Device Type.</strong>" Because you are
        setting up the thermostat as an Analog device, you will also want to
        check the <strong>Don't Display</strong> attribute to prevent having
        this Insteon device appear as a duplicate in the Analog Device entries
        in the Device Status window. If you are not sure what the Device Type
        is, then select the * Auto Discovery * parameter in the Device Type cell
        and then click on the "Save/Refresh" button. Once the auto discovery
        process completes successfully, click on the Save/Refresh button again
        to refresh the window. The correct Device <ype>  
         Type </YPE> should then
        be displayed. </p>
      <p>After clicking on the Save/Refrresh button, look at the Pending and
        Completed Operations windows in Insteon Explorer. If the Save/Refresh
        operation does not complete succecssfully you will see something as
        shown below where the "CREATE I2CS INITIAL:" operation keeps trying and
        trying without success. You will see <span class="ph-txt-red">red</span>
        entries in the Insteon Raw Log window (red arrows) indicating NAK
        responses from the device, because a connection cannot be made. This
        occurs because some I2CS Insteon devices contain firewalls to protect
        against program modification.</p>
      <p>If your Save/Refresh operation went successfully, then you should see
        in the Completed Operations window a single CREATE I2CS INITIAL entrty
        with several CREATE CTLR LINK entries above it (one for each Controller
        Group you defined. </p>
      <p><IMG alt="STAT-Create I2CS" src ="images/STAT-Creat%20I2CS.jpg"

          width=663 height=299 ></p>
      <p>If you encounter blocked access to your I2CS device, then the following
        proceedure must be used to get around the I2CS device firewall
        protection.</p>
      <p>Go to the <strong>Devices</strong> Tab and change the IEngine entry
        for the I2CS device from I2CS to I2. Do a Save/Refresh. This should
        allow the CREATE CTLR LINK operations to successfully run. Once they do,
        change the IEngine type back to I2CS and do another Save/Refresh.</p>
      <p>Now open the PH Explorer <strong>Links</strong> tab and set up the
        Links between each STAT and and your Insteon Controller.</p>
      <p>PowerHome now has support that causes Thermostat devices to update
        within PowerHome as items change so you don't have to rely solely on
        polling. (See setting up Triggers, below.) With the thermostat as the
        current device, you'll want to create responder links with the STAT as
        the controller and the PLM as responder. The first link created should
        be from group 239. Next create the group 1 followed by group 2 followed
        by group 3.&nbsp;</p>
      <p>You can control the order of group creation (and thus Trigger handling
        priority) by using the CTRL Sort field Place a 1 in the 239 group, a 2
        in the 1 group, etc and place a 9 in all other groups as the order
        doesnt really matter after that). </p>
      <p><IMG alt=STAT-Links src="images/STAT-Links.png" width=1169 height=356></p>
      <p>You now have the Device configuration parameters all set up, and you
        are ready to use it. </p>
      <p>From PowerHome Explorer open the Analog I/O window...</p>
      <p><IMG alt="STAT-Analog Object" src ="images/STAT-PH%20Exp-Analog.png"

          width=230 height=299 ></p>
      <p>and Add the five Insteon Stat attributes that can be sensed (Cool Set
        Point, Heat Set Point, Humidity, Stat Mode, and Temp) for each of your
        thermostat devices. </p>
      <p>Create ID Names to use with Macros, Triggers, etc. and enter a
        description for each item. This Description will be used in the Device
        Status window to describe the item. Select the <strong>I/O,</strong>
        and <strong>Controller</strong> parameters from the pull-down lists.
        Enter the <strong>IP Address</strong> for the STAT (this will change to
        the Device ID string in later releases of PH) and a poll interval (in
        seconds) to repeatedly check the status of each item. Enter a string in
        the <strong>Message</strong> field that you want to appear in the
        Device Status window, after the parameter value. The <span style="FONT-WEIGHT: bold">Poll
          Intvl </span>field allows you to specify how often PowerHome should
        manually "poll" for the values from the thermostat. This column is in
        seconds. From the examples below, a Poll Interval of 300 is used which
        equates to 5 minutes.</p>
      <p><IMG alt="STAT-Analog Table" src ="images/STAT-analog%20win.png"

          width=1276 height=219 ></p>
      <p>Device Status Window showing "Message" strings appended to parameter
        values...</p>
      <p><IMG alt="STAT-Dvc Status" src ="images/STAT-Dvc%20Status.png"

          width=240 height=175 > </p>
      <p>This completes the setup of the Thermostats. </p>
      <p>Reinit/Restart PowerHome to assure all changes are locked in and saved.      </p>
      <p>You can now read/write STAT values using the following PH Functions...</p>
      <p><strong>&nbsp;&nbsp;ph_getanalog("ID")<br>
          &nbsp;&nbsp;ph_setanalogout("ID","value")</strong></p>
      <p>where "ID" is the string used to identify the individual STAT parameter
        of interest.</p>
      <p>The information returned by the ph_getanalog function will be a string
        value. In the case of values such as temperature and cool setpoint, this
        string value will be a numeric (eg. 37, 72, 78, etc).&nbsp; You will
        need to use a function such as integer() to convert the string to a
        numeric for further processing.&nbsp; Executing ph_getanalog for the
        thermostat mode will return values such as "Off", "Cool", "Heat",
        etc.&nbsp; Unlike previous PowerHome Insteon Thermostat routines, the
        data values for setpoint and termperature are now direct reading and do
        not have to be divided by two to obtain the correct value. </p>
      <p>For instance the following reads all of the "TS1" thermostat
        parameters, and writes each to a Global Variable (which you have already
        defined in the Global Variables window...</p>
      <p><IMG alt=STAT-read src="images/STAT-read%20values.png" width=528 height=136></p>
      <p class="ph11"><strong>NOTE</strong>:  The ph_getanalog function ONLY returns <strong>text</strong> values. In the case of setpoint and temps, the text value returned will be numeric but it is still a text value in terms of a formula. For example... </p>
      <p class="ph11"><strong>&nbsp;&nbsp;&nbsp;&nbsp;if(ph_getanalog("TS1CSP") &lt;  78,1,0) </strong></p>
      <p class="ph11">The above formula will fail because you're comparing  text  to a numeric.  You would need to use this instead...</p>
      <p class="ph11"><strong>&nbsp;&nbsp;&nbsp;&nbsp;if(integer(ph_getanalog("TS1CSP")) 
 &lt;  78,1,0) </strong></p>
      <p class="ph11">This function is now proper because a  number is now compared to another number.</p>
      <p class="ph11">&nbsp;</p>
      <p>The following writes a new Heat Setpoint value to the "TS2"
        thermostat. </p>
      <p>&nbsp;&nbsp;<strong>ph_setanalogout("TS2HSP","72")</strong> </p>
      <p>Its important to note that the second value is a <span style="FONT-WEIGHT: bold">string</span>
        instead of a numeric value.&nbsp; This is because the ph_setanalogout
        function is looking for the calculated value which can be
        anything.&nbsp; In the case of the thermostat device types, the
        calculated value and the raw value are essentially the same.</p>
      <p>In order to have the changing thermostat values updated into your
        Global variables, or in your Control Center or web page, appropriate
        Triggers must be defined in the <strong>Triggers</strong> window. </p>
      <p><strong>NOTE</strong>: When the Trigger is activated, <strong>TEMP4</strong>
        will contain the appropriate <span style="FONT-WEIGHT: bold">RAW</span>
        value read from the STAT for use in setting Global Variables, or in
        formula actions you may wish to take. The best way to fetch the TEMP4
        value is to use the <em><strong>ph_getvar(2,4)</strong></em> function.
        The <span style="FONT-WEIGHT: bold">TEMP5</span> variable will contain
        the calculated value read from the STAT. In the case of temps and
        setpoints, the raw and calculated values are the same. In the case of
        the thermostat mode, TEMP4 will contain the raw value 2 while TEMP5 will
        contain the calculated value "Cool". The best way to fetch the TEMP5
        value is to use <span style="FONT-STYLE: italic; FONT-WEIGHT: bold">ph_getvar(2,5)</span>.</p>
      <p>A typical setup might look like this...</p>
      <p><IMG alt="STAT-trigger setup" src ="images/STAT-Trigger%20Setup.png"

          width=1422 height=355 > </p>
      <p>Note the "Action Type", "Trigger Type", and "Trigger ID" are all
        pull-down selections. Everything else in the blue background areas, you
        will enter yourself. The grayed area values are automatically inserted
        by your pull-down choices.</p>
      <p>A typical Action would be this...</p>
      <p class="style1">&nbsp;&nbsp;ph_setglobal_s("STAT-DWN-COOLSP",ph_getvar_s(2,4))+<br>
&nbsp;&nbsp;ph_setglobal_s("STAT-DWN-SET",ph_getglobal_s("STAT-DWN-COOLSP"))</p>
      <p>which reads the contents of <span style="FONT-WEIGHT: bold">TEMP4</span>
        and writes it to the Global "STAT-DWN-COOLSP" and also updates the
        STAT-DWN-SET variable which is used as a single convenient setpoint
        variable that holds either the Heat or the Cool setpoint, as appropriate
        for the current STAT Mode.</p>
      <p>At this point, you should have a working Insteon Thermostat setup in
        PowerHome. From this base, you are now ready to read and control your
        thermostats as dictated by your needs and imagination. </p>
      <p> </p>
    </div>
  </body>
</html>
